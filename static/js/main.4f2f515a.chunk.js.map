{"version":3,"sources":["library/tezos/operations/getSwap.js","components/setup/style.js","components/setup/index.jsx","library/ethereum/account/setAccount.js","library/tezos/account/setAccount.js","library/ethereum/account/getAccountBalance.js","library/tezos/account/getAccountBalance.js","components/header/style.js","components/header/index.jsx","components/home/style.js","components/home/index.jsx","library/common/getConversionRate.js","library/tezos/operations/getSwaps.js","components/newSwap/style.js","components/loader/style.js","components/loader/index.jsx","components/newSwap/ethereum/createSwap/index.jsx","components/newSwap/ethereum/getSwaps/index.jsx","components/newSwap/ethereum/index.jsx","components/newSwap/index.jsx","library/ethereum/operations/getSwaps.js","components/newSwap/tezos/createSwap/index.jsx","components/newSwap/tezos/getSwaps/index.jsx","components/newSwap/tezos/index.jsx","library/ethereum/operations/getSwap.js","library/tezos/operations/util/invokeContract.js","library/tezos/operations/initiateWait.js","library/common/createSecrets.js","library/tezos/operations/addCounterParty.js","library/ethereum/operations/redeem.js","library/tezos/operations/refund.js","library/common/request-tezos.js","library/ethereum/operations/initiateWait.js","library/ethereum/operations/addCounterParty.js","library/tezos/operations/redeem.js","library/ethereum/operations/getRedeemedSwap.js","library/ethereum/operations/refund.js","library/common/respond-tezos.js","library/common/request-eth.js","library/tezos/operations/getRedeemedSwap.js","library/common/respond-eth.js","App.js","serviceWorker.js","index.js","library/ethereum/operations/bc-intereraction.js"],"names":["getSwap","secretHash","a","substring","packedKey","TezosMessageUtils","encodeBigMapKey","Buffer","from","writePackedData","TezosNodeReader","getValueForBigMapKey","config","tezos","RPC","undefined","jsonData","hashedSecret","JSONPath","path","json","initiator","initiator_eth","participant","refundTimestamp","Number","Math","round","Date","getTime","state","value","useStyles","makeStyles","theme","container","width","form","display","flexDirection","margin","padding","border","borderRadius","input","fontSize","submit","color","fontWeight","backgroundColor","cursor","intro","title","fontFamily","Setup","init","classes","className","onSubmit","e","preventDefault","target","eth","tez","type","placeholder","name","setEthAccount","key","web3","Web3","providers","HttpProvider","ethereum","keyStore","accounts","privateKeyToAccount","privateKey","contract","Contract","abi","contractAddr","setTezAccount","tezSetup","KeyStoreUtils","restoreIdentityFromSecretKey","SoftSigner","createSigner","writeKeyWithHint","signer","accountBalanceEth","address","getBalance","balance","accountBalanceTez","getSpendableBalanceForAccount","result","header","justifyContent","account","button","marginBottom","Header","ethStore","tezStore","useState","setBalance","history","useHistory","updateBalance","publicKeyHash","pow","useEffect","timer","setInterval","clearInterval","onClick","push","background","swaps","swap","lineHeight","Home","data","Object","keys","map","exp","refundTime","toLocaleString","1","2","3","4","SwapItem","getConvertionRate","tezosNode","chain_id","xtzPrice","ethPrice","parseValue","michelsonData","michelineData","TezosLanguageUtil","translateMichelsonToMicheline","JSON","parse","readAddress","getSwaps","ConseilDataClient","executeEntityQuery","conseilServer","network","fields","predicates","field","operation","ConseilOperator","EQ","set","inverse","ISNULL","orderBy","direction","ConseilSortDirection","DESC","aggregation","limit","forEach","select","selectButton","expectedValue","create","valueInput","marginRight","msg","loader","Loader","message","CircularProgress","size","CreateSwap","genSwap","rate","setRate","setInput","getConversionRate","then","res","console","log","rt","generateSwap","alert","step","min","onInput","GetSwap","selfAcc","setSwaps","setLoader","fullLoader","setFullLoader","filterSwaps","swps","swp","trunc","now","displayValue","pay","length","Ethereum","Swap","store","methods","getAllSwaps","call","dispValue","Tezos","invokeContract","amtInMuTez","entry_point","parameters","extraGas","extraStorage","Promise","resolve","reject","TezosNodeWriter","testContractInvocationOperation","TezosParameterFormat","Michelson","gas","freight","storageCost","sendContractInvocationOperation","groupid","replace","TezosConseilClient","awaitOperationConfirmation","catch","err","initWait","ethAddress","amtMuTez","time","status","createSecrets","rand","crypto","randomBytes","hash","createHash","update","digest","secret","toString","addCounterParty","tezAccount","redeem","encodeABI","BCInteract","rc","refund","waitCompletion","tid","getSwapEth","requestTezos","amount","getSwapTez","stringify","initiator_tez","tezAcc","amtInEther","initiateWait","addCoutnerParty","ethAccount","getRedeemedSecret","getPastEvents","filter","_hashedSecret","fromBlock","toBlock","returnValues","id","respondTezos","req_swap","requestEth","splt","split","i","respondEth","App","ethSetup","updateSwaps","React","updateState","swapRef","useRef","current","ethRef","tezRef","forceUpdate","useCallback","initialize","ethKey","tezKey","newSwap","newSwaps","basename","process","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","interact","ether","to","chain","getBlock","_gasLimit","gasLimit","getGasPrice","_gasPrice","_hex_gasLimit","utils","toHex","_hex_gasPrice","_hex_Gas","getTransactionCount","nonce","rawTx","gasPrice","toWei","tx","Transaction","sign","serializedTx","serialize","sendSignedTransaction","on","transactionHash","contractAddress"],"mappings":"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","file":"static/js/main.4f2f515a.chunk.js","sourcesContent":["import { TezosNodeReader, TezosMessageUtils } from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\nimport { JSONPath } from \"jsonpath-plus\";\n\nconst getSwap = async (secretHash) => {\n  secretHash = secretHash.substring(2);\n  const packedKey = TezosMessageUtils.encodeBigMapKey(\n    Buffer.from(TezosMessageUtils.writePackedData(secretHash, \"bytes\"), \"hex\")\n  );\n  const jsonData = await TezosNodeReader.getValueForBigMapKey(\n    config.tezos.RPC,\n    15534,\n    packedKey\n  );\n  if (jsonData === undefined) return jsonData;\n  return {\n    hashedSecret:\n      \"0x\" +\n      JSONPath({\n        path: \"$.args[0].args[0].bytes\",\n        json: jsonData,\n      })[0],\n    initiator: JSONPath({\n      path: \"$.args[0].args[1].args[0].string\",\n      json: jsonData,\n    })[0],\n    initiator_eth: JSONPath({\n      path: \"$.args[0].args[1].args[1].string\",\n      json: jsonData,\n    })[0],\n    participant: JSONPath({\n      path: \"$.args[1].args[0].args[0].string\",\n      json: jsonData,\n    })[0],\n    refundTimestamp: Number(\n      Math.round(\n        new Date(\n          JSONPath({\n            path: \"$.args[1].args[0].args[1].string\",\n            json: jsonData,\n          })[0]\n        ).getTime() / 1000\n      )\n    ),\n    state: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[0].int\", json: jsonData })[0]\n    ),\n    value: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[1].int\", json: jsonData })[0]\n    ),\n  };\n};\n\nexport default getSwap;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"31%\",\n    margin: \"0 auto\",\n    padding: \"2vw 3vw 1vw 3vw\",\n    border: \"0.3vw black solid\",\n    borderRadius: \"1vw\",\n  },\n  input: { margin: \"1vw\", fontSize: \"1.2vw\" },\n  submit: {\n    color: \"white\",\n    width: \"fit-content\",\n    border: \"0.1vw black solid\",\n    margin: \"1vw auto\",\n    padding: \"0.5vw\",\n    fontWeight: \"bold\",\n    borderRadius: \"0.3vw\",\n    backgroundColor: \"black\",\n    cursor: \"pointer\",\n    fontSize: \"1.2vw\",\n  },\n  intro: {\n    margin: \"5vw\",\n    fontSize: \"1.5vw\",\n  },\n  title: {\n    fontFamily: \"'Pacifico', cursive\",\n    fontSize: \"5vw\",\n    margin: \"0\",\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport useStyles from \"./style\";\nconst Setup = ({ init }) => {\n  const setup = (e) => {\n    e.preventDefault();\n    if (e.target.eth.value !== \"\" && e.target.tez.value !== \"\")\n      init(e.target.eth.value, e.target.tez.value);\n  };\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <div className={classes.intro}>\n        <h1 className={classes.title}>Atomic Swap</h1>\n        <p>Cross-Chain Atomic Swaps for Ethereum and Tezos</p>\n        <p>\n          *Do not refresh or close the app during an running swap, your swaps\n          will be lost\n        </p>\n      </div>\n      <form className={classes.form} onSubmit={setup}>\n        <input\n          className={classes.input}\n          type=\"password\"\n          placeholder=\"ethereum private key [goerli-testnet]\"\n          name=\"eth\"\n        />\n        <input\n          className={classes.input}\n          type=\"password\"\n          placeholder=\"tezos private key [carthagenet]\"\n          name=\"tez\"\n        />\n        <input className={classes.submit} type=\"submit\" value=\"START\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Setup;\n","import Web3 from \"web3\";\nimport config from \"../../../globalConfig.json\";\n\nconst setEthAccount = (key) => {\n  const web3 = new Web3(new Web3.providers.HttpProvider(config.ethereum.RPC));\n  const keyStore = web3.eth.accounts.privateKeyToAccount(key);\n  keyStore.privateKey = keyStore.privateKey.substring(2);\n  const contract = new web3.eth.Contract(\n    config.ethereum.abi,\n    config.ethereum.contractAddr\n  );\n  return { web3, keyStore, contract };\n};\n\nexport default setEthAccount;\n","import { KeyStoreUtils, SoftSigner } from \"conseiljs-softsigner\";\nimport { TezosMessageUtils } from \"conseiljs\";\n\nconst setTezAccount = async (key, tezSetup) => {\n  const keyStore = await KeyStoreUtils.restoreIdentityFromSecretKey(key);\n  const signer = await SoftSigner.createSigner(\n    TezosMessageUtils.writeKeyWithHint(key, \"edsk\"),\n    -1\n  );\n  return { keyStore, signer };\n};\n\nexport default setTezAccount;\n","const accountBalanceEth = async (web3, address) => {\n  const balance = await web3.eth.getBalance(address); //Will give value in.\n  return balance;\n};\n\nexport default accountBalanceEth;\n","import { TezosNodeReader } from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\n\nconst accountBalanceTez = async (address) => {\n  const result = await TezosNodeReader.getSpendableBalanceForAccount(\n    config.tezos.RPC,\n    address\n  );\n  return result;\n};\n\nexport default accountBalanceTez;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    display: \"flex\",\n    padding: \"1.5vw\",\n    fontSize: \"1.5vw\",\n    justifyContent: \"space-between\",\n  },\n  account: {\n    padding: \"0.6vw\",\n    border: \"0.2vw black solid\",\n    borderRadius: \"2vw\",\n  },\n  button: {\n    color: \"white\",\n    border: \"none\",\n    cursor: \"pointer\",\n    padding: \"0.4vw 1vw\",\n    fontWeight: \"bold\",\n    borderRadius: \"0.5vw\",\n    backgroundColor: \"black\",\n    marginBottom: \"5vw\",\n    fontSize: \"1.4vw\",\n  },\n}));\n\nexport default useStyles;\n","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport accountBalanceEth from \"../../library/ethereum/account/getAccountBalance\";\nimport accountBalanceTez from \"../../library/tezos/account/getAccountBalance\";\nimport useStyles from \"./style\";\nimport { useHistory } from \"react-router-dom\";\nconst Header = ({ ethStore, tezStore }) => {\n  const [balance, setBalance] = useState({ eth: \"0 ETH\", tez: \"0 XTZ\" });\n  const classes = useStyles();\n  const history = useHistory();\n  const updateBalance = async () => {\n    let eth = await accountBalanceEth(ethStore.web3, ethStore.keyStore.address);\n    let tez = await accountBalanceTez(tezStore.keyStore.publicKeyHash);\n    eth = eth / Math.pow(10, 18);\n    tez = tez / 1000000;\n    setBalance({ eth: `${eth} ETH`, tez: `${tez} XTZ` });\n  };\n\n  useEffect(() => {\n    updateBalance();\n    const timer = setInterval(async () => {\n      await updateBalance();\n    }, 120000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [ethStore.keyStore.address, tezStore.keyStore.publicKeyHash]);\n\n  return (\n    <>\n      <div className={classes.header}>\n        <div className={classes.account}>\n          <p>Ethereum Addr.: {ethStore.keyStore.address}</p>\n          <p>Balance : {balance.eth}</p>\n        </div>\n        <div className={classes.account}>\n          <p>Tezos Addr.: {tezStore.keyStore.publicKeyHash}</p>\n          <p>Balance : {balance.tez}</p>\n        </div>\n      </div>\n      <button className={classes.button} onClick={() => history.push(\"/\")}>\n        Home\n      </button>\n    </>\n  );\n};\n\nexport default Header;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    color: \"white\",\n    border: \"none\",\n    cursor: \"pointer\",\n    padding: \"1vw\",\n    background: \"black\",\n    fontWeight: \"bold\",\n    borderRadius: \"1vw\",\n    fontSize: \"1.5vw\",\n  },\n  swaps: { margin: \"2.5vw\", padding: \"2vw\" },\n  swap: {\n    color: \"white\",\n    width: \"fit-content\",\n    border: \"0.2vw black solid\",\n    margin: \"3vw auto\",\n    padding: \"0.5vw 2vw\",\n    lineHeight: \"1.7vw\",\n    borderRadius: \"4vw\",\n    backgroundColor: \"black\",\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"./style\";\n\nconst Home = ({ swaps }) => {\n  const history = useHistory();\n  const classes = useStyles();\n  const SwapItem = (data) => {\n    const exp = new Date(data.refundTime * 1000);\n    const state = {\n      1: \"Running[1]\",\n      2: \"Running[2]\",\n      3: \"Completed\",\n      4: \"Refunded\",\n    };\n    return (\n      <div className={classes.swap} key={data.hashedSecret}>\n        <p>Hash : {data.hashedSecret}</p>\n        <p>Value : {data.value}</p>\n        <p>Expiry Time : {exp.toLocaleString()}</p>\n        <p>State : {state[data.state]}</p>\n      </div>\n    );\n  };\n  let data = <p>No Swaps Created Yet!</p>;\n  if (swaps !== undefined)\n    data = Object.keys(swaps).map((key) => SwapItem(swaps[key]));\n  return (\n    <div>\n      <button\n        className={classes.button}\n        onClick={() => history.push(\"/create\")}\n      >\n        Start New Swap\n      </button>\n      <div className={classes.swaps}>\n        <h3>Your Swaps</h3>\n        {data}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { TezosNodeReader } from \"conseiljs\";\nimport config from \"../../globalConfig.json\";\nimport { JSONPath } from \"jsonpath-plus\";\n\nconst getConvertionRate = async () => {\n  let data = await TezosNodeReader.getValueForBigMapKey(\n    config.tezos.tezosNode,\n    14981,\n    \"exprukkbxD4rqiYFhFNSkLHfyEfbVEMirvDS9naHRjGKbzPsREJfmc\",\n    undefined,\n    config.tezos.chain_id\n  );\n  const xtzPrice = Number(\n    JSONPath({ path: \"$.args[0].args[0].int\", json: data })[0]\n  );\n  data = await TezosNodeReader.getValueForBigMapKey(\n    config.tezos.tezosNode,\n    14981,\n    \"exprv9NLX1skZHFM1i6eXc7eAazz25T1BVjkDzc47fWEEjn6y2Zsay\",\n    undefined,\n    config.tezos.chain_id\n  );\n  const ethPrice = Number(\n    JSONPath({ path: \"$.args[0].args[0].int\", json: data })[0]\n  );\n  return ethPrice / xtzPrice;\n};\n\nexport default getConvertionRate;\n","import {\n  ConseilDataClient,\n  ConseilOperator,\n  ConseilSortDirection,\n  TezosLanguageUtil,\n  TezosMessageUtils,\n} from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\nimport { JSONPath } from \"jsonpath-plus\";\n\nconst parseValue = (michelsonData) => {\n  const michelineData = TezosLanguageUtil.translateMichelsonToMicheline(\n    michelsonData\n  );\n  const jsonData = JSON.parse(michelineData);\n\n  return {\n    hashedSecret:\n      \"0x\" +\n      JSONPath({\n        path: \"$.args[0].args[0].bytes\",\n        json: jsonData,\n      })[0],\n    initiator: TezosMessageUtils.readAddress(\n      JSONPath({ path: \"$.args[0].args[1].args[0].bytes\", json: jsonData })[0]\n    ),\n    initiator_eth: JSONPath({\n      path: \"$.args[0].args[1].args[1].string\",\n      json: jsonData,\n    })[0],\n    participant: TezosMessageUtils.readAddress(\n      JSONPath({ path: \"$.args[1].args[0].args[0].bytes\", json: jsonData })[0]\n    ),\n    refundTimestamp: Number(\n      JSONPath({ path: \"$.args[1].args[0].args[1].int\", json: jsonData })[0]\n    ),\n    state: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[0].int\", json: jsonData })[0]\n    ),\n    value: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[1].int\", json: jsonData })[0]\n    ),\n  };\n};\n\nconst getSwaps = async () => {\n  const data = await ConseilDataClient.executeEntityQuery(\n    config.tezos.conseilServer,\n    \"tezos\",\n    config.tezos.network,\n    \"big_map_contents\",\n    {\n      fields: [\"key\", \"key_hash\", \"operation_group_id\", \"big_map_id\", \"value\"],\n      predicates: [\n        {\n          field: \"big_map_id\",\n          operation: ConseilOperator.EQ,\n          set: [\"15534\"],\n          inverse: false,\n        },\n        {\n          field: \"value\",\n          operation: ConseilOperator.ISNULL,\n          set: [\"\"],\n          inverse: true,\n        },\n      ],\n      orderBy: [{ field: \"key\", direction: ConseilSortDirection.DESC }],\n      aggregation: [],\n      limit: 1000,\n    }\n  );\n  let swaps = [];\n  data.forEach((e) => {\n    if (e.value !== null) swaps.push(parseValue(e.value));\n  });\n  return swaps;\n};\n\nexport default getSwaps;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"30%\",\n    margin: \"2% auto\",\n  },\n  selectButton: {\n    margin: \"1.5vw\",\n    padding: \"4vw\",\n    backgroundColor: \"black\",\n    borderRadius: \"0.6vw\",\n    color: \"white\",\n    fontSize: \"2.5vw\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\",\n    border: \"0.2vw solid black\",\n    \"&:hover\": {\n      backgroundColor: \"white\",\n      color: \"black\",\n    },\n  },\n  expectedValue: { display: \"block\", margin: \"3vw\" },\n  create: {\n    backgroundColor: \"black\",\n    border: \"none\",\n    borderRadius: \"0.5vw\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    padding: \"0.4vw 1vw\",\n    cursor: \"pointer\",\n  },\n  valueInput: { marginRight: \"1vw\", padding: \"0.2vw\" },\n  swap: {\n    color: \"white\",\n    width: \"fit-content\",\n    border: \"0.2vw black solid\",\n    margin: \"3vw auto\",\n    padding: \"0.5vw 2vw\",\n    lineHeight: \"1.7vw\",\n    borderRadius: \"4vw\",\n    backgroundColor: \"black\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      backgroundColor: \"white\",\n      color: \"black\",\n    },\n  },\n  msg: {\n    margin: \"4vw 1vw\",\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  loader: {\n    color: \"black\",\n    fontSize: \"2vw\",\n  },\n  msg: { margin: \"2vw\", fontSize: \"1.5vw\" },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport useStyles from \"./style\";\n\nconst Loader = ({ message }) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <CircularProgress className={classes.loader} size={60} />\n      <p className={classes.msg}>{message}</p>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\n\nconst CreateSwap = ({ genSwap, loader }) => {\n  const [rate, setRate] = useState(0);\n  const [input, setInput] = useState(0);\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      setRate(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      setRate(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const generateSwap = async (e) => {\n    e.preventDefault();\n    if (e.target.eth.value === \"\" || e.target.eth.value === 0) return;\n    loader(true);\n    const res = await genSwap(1, e.target.eth.value);\n    loader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  return (\n    <>\n      <form onSubmit={generateSwap}>\n        <input\n          type=\"number\"\n          placeholder=\"Amount in ETH\"\n          name=\"eth\"\n          step=\".0001\"\n          min=\"0\"\n          onInput={(e) => setInput(e.target.value)}\n          className={classes.valueInput}\n        />\n        <input className={classes.create} type=\"submit\" value=\"CREATE\" />\n      </form>\n      <div>\n        <p className={classes.expectedValue}>\n          Expected XTZ Value : {input * rate} XTZ\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default CreateSwap;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport getSwaps from \"../../../../library/tezos/operations/getSwaps\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\nimport Loader from \"../../../loader\";\nimport CreateSwap from \"../createSwap\";\n\nconst GetSwap = ({ genSwap, selfAcc }) => {\n  const [swaps, setSwaps] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const [fullLoader, setFullLoader] = useState(false);\n  const history = useHistory();\n  const classes = useStyles();\n\n  const filterSwaps = async (rt) => {\n    const data = await getSwaps();\n    let swps = [];\n    data.forEach((swp) => {\n      if (\n        swp.participant === swp.initiator &&\n        swp.initiator !== selfAcc &&\n        Math.trunc(Date.now() / 1000) < swp.refundTimestamp - 4200\n      )\n        swps.push({\n          ...swp,\n          displayValue: swp.value / 1000000,\n          pay: swp.value / (rt * 1000000),\n        });\n    });\n    setSwaps(swps);\n    setLoader(false);\n  };\n\n  const SwapItem = (data) => {\n    return (\n      <div\n        onClick={() => {\n          generateSwap(data.pay, data);\n        }}\n        key={data.hashedSecret}\n        className={classes.swap}\n      >\n        <p>Hash : {data.hashedSecret}</p>\n        <p>XTZ Value : {data.displayValue}</p>\n        <p>ETH to Pay : {data.pay}</p>\n      </div>\n    );\n  };\n\n  const generateSwap = async (value, data) => {\n    setFullLoader(true);\n    const res = await genSwap(2, value, data);\n    setFullLoader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      filterSwaps(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      filterSwaps(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  let data = \"No Swaps Found. Create One!\";\n  if (swaps.length > 0) data = swaps.map((swp) => SwapItem(swp));\n  if (fullLoader) return <Loader message=\"..Creating Your Swap..\" />;\n  return (\n    <div>\n      <CreateSwap genSwap={genSwap} loader={setFullLoader} />\n      <h3>Or</h3>\n      <h3 className={classes.msg}>Select From Available SWAPS</h3>\n      {loader && <Loader message=\"..Loading Swaps..\" />}\n      {!loader && data}\n    </div>\n  );\n};\n\nexport default GetSwap;\n","import React from \"react\";\nimport GetSwap from \"./getSwaps\";\n\nconst Ethereum = ({ genSwap, selfAcc }) => {\n  return <GetSwap genSwap={genSwap} selfAcc={selfAcc} />;\n};\n\nexport default Ethereum;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"./style\";\n\nconst Swap = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  return (\n    <div className={classes.select}>\n      <button\n        className={classes.selectButton}\n        onClick={() => history.push(\"/create/xtz\")}\n      >\n        XTZ-&gt;ETH\n      </button>\n      <button\n        className={classes.selectButton}\n        onClick={() => history.push(\"/create/eth\")}\n      >\n        ETH-&gt;XTZ\n      </button>\n    </div>\n  );\n};\n\nexport default Swap;\n","const getSwaps = async (store) => {\n  const swaps = await store.contract.methods.getAllSwaps().call();\n  return swaps;\n};\n\nexport default getSwaps;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\n\nconst CreateSwap = ({ genSwap, loader }) => {\n  const [rate, setRate] = useState(0);\n  const [input, setInput] = useState(0);\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      setRate(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      setRate(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const generateSwap = async (e) => {\n    e.preventDefault();\n    if (e.target.tez.value === \"\" || e.target.tez.value === 0) return;\n    loader(true);\n    const res = await genSwap(2, e.target.tez.value);\n    loader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  return (\n    <>\n      <form onSubmit={generateSwap}>\n        <input\n          type=\"number\"\n          placeholder=\"Amount in XTZ\"\n          name=\"tez\"\n          step=\".0001\"\n          min=\"0\"\n          onInput={(e) => setInput(e.target.value)}\n          className={classes.valueInput}\n        />\n        <input className={classes.create} type=\"submit\" value=\"CREATE\" />\n      </form>\n      <div>\n        <p className={classes.expectedValue}>\n          Expected ETH Value : {input / rate} ETH\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default CreateSwap;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport getSwaps from \"../../../../library/ethereum/operations/getSwaps\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\nimport CreateSwap from \"../createSwap\";\nimport Loader from \"../../../loader\";\n\nconst GetSwap = ({ genSwap, ethStore }) => {\n  const [swaps, setSwaps] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const [fullLoader, setFullLoader] = useState(false);\n\n  const history = useHistory();\n  const classes = useStyles();\n  const filterSwaps = async (rt) => {\n    const data = await getSwaps(ethStore);\n    let swps = [];\n    data.forEach((swp) => {\n      if (\n        swp.participant === swp.initiator &&\n        swp.initiator !== ethStore.keyStore.address &&\n        Math.trunc(Date.now() / 1000) < swp.refundTimestamp - 4200\n      )\n        swps.push({\n          ...swp,\n          dispValue: swp.value / Math.pow(10, 18),\n          pay: (swp.value * rt) / Math.pow(10, 18),\n        });\n    });\n    setSwaps(swps);\n    setLoader(false);\n  };\n\n  const SwapItem = (data) => {\n    return (\n      <div\n        onClick={() => {\n          generateSwap(data.pay, data);\n        }}\n        key={data.hashedSecret}\n        className={classes.swap}\n      >\n        <p>Hash : {data.hashedSecret}</p>\n        <p>ETH Value : {data.dispValue}</p>\n        <p>XTZ to Pay : {data.pay}</p>\n      </div>\n    );\n  };\n\n  const generateSwap = async (value, data) => {\n    setFullLoader(true);\n    const res = await genSwap(1, value, data);\n    setFullLoader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      filterSwaps(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      filterSwaps(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  let data = \"No Swaps Found. Create One!\";\n  if (swaps.length > 0) data = swaps.map((swp) => SwapItem(swp));\n  if (fullLoader) return <Loader message=\"..Creating Your Swap..\" />;\n  return (\n    <div>\n      <CreateSwap genSwap={genSwap} loader={setFullLoader} />\n      <h3>Or</h3>\n      <h3 className={classes.msg}>Select From Available SWAPS</h3>\n      {loader && <Loader message=\"..Loading Swaps..\" />}\n      {!loader && data}\n    </div>\n  );\n};\n\nexport default GetSwap;\n","import React from \"react\";\nimport GetSwap from \"./getSwaps\";\n\nconst Tezos = ({ genSwap, ethStore }) => {\n  return <GetSwap genSwap={genSwap} ethStore={ethStore} />;\n};\n\nexport default Tezos;\n","const getSwap = async (store, secretHash) => {\n  const swap = await store.contract.methods.swaps(secretHash).call();\n  return swap;\n};\n\nexport default getSwap;\n","import {\n  TezosConseilClient,\n  TezosNodeWriter,\n  TezosParameterFormat,\n} from \"conseiljs\";\nimport config from \"../../../../globalConfig.json\";\n\nconst invokeContract = (\n  store,\n  amtInMuTez,\n  entry_point,\n  parameters,\n  extraGas = 300,\n  extraStorage = 50\n) => {\n  return new Promise((resolve, reject) => {\n    const fee = 105000,\n      storage_limit = 6000,\n      gas_limit = 1000000;\n    TezosNodeWriter.testContractInvocationOperation(\n      config.tezos.RPC,\n      config.tezos.chain_id,\n      store.keyStore,\n      config.tezos.contractAddr,\n      amtInMuTez,\n      fee,\n      storage_limit,\n      gas_limit,\n      entry_point,\n      parameters,\n      TezosParameterFormat.Michelson\n    )\n      .then(({ gas, storageCost: freight }) => {\n        console.log(gas + extraGas, freight, ~~((gas + extraGas) / 10 + 300));\n        return TezosNodeWriter.sendContractInvocationOperation(\n          config.tezos.RPC,\n          store.signer,\n          store.keyStore,\n          config.tezos.contractAddr,\n          amtInMuTez,\n          200000,\n          freight + extraStorage,\n          gas + extraGas,\n          entry_point,\n          parameters,\n          TezosParameterFormat.Michelson\n        );\n      })\n      .then((result) => {\n        const groupid = result[\"operationGroupID\"]\n          .replace(/\"/g, \"\")\n          .replace(/\\n/, \"\"); // clean up RPC output\n        return TezosConseilClient.awaitOperationConfirmation(\n          config.tezos.conseilServer,\n          config.tezos.network,\n          groupid,\n          2\n        );\n      })\n      .then(resolve)\n      .catch((err) => {\n        console.log(err);\n        reject(err);\n      });\n  });\n};\n\nexport default invokeContract;\n","import invokeContract from \"./util/invokeContract\";\n\nconst initWait = async (store, ethAddress, amtMuTez, hashedSecret, time) => {\n  const res = await invokeContract(\n    store,\n    amtMuTez,\n    \"initiateWait\",\n    `(Pair ${hashedSecret} (Pair \"${time}\" \"${ethAddress}\"))`,\n    10000,\n    300\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default initWait;\n","import crypto from \"crypto\";\n\nconst createSecrets = () => {\n  const rand = crypto.randomBytes(32);\n  let hash = crypto.createHash(\"sha256\").update(rand).digest();\n  hash = crypto.createHash(\"sha256\").update(hash).digest(\"hex\");\n  return {\n    hashedSecret: \"0x\" + hash,\n    secret: \"0x\" + rand.toString(\"hex\"),\n  };\n};\n\nexport default createSecrets;\n","import invokeContract from \"./util/invokeContract\";\n\nconst addCounterParty = async (store, tezAccount, hashedSecret) => {\n  const res = await invokeContract(\n    store,\n    0,\n    \"addCounterParty\",\n    `(Pair ${hashedSecret} \"${tezAccount}\")`,\n    100000\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default addCounterParty;\n","import BCInteract from \"./bc-intereraction\";\n\nconst redeem = async (web3, store, secretHash, secret) => {\n  const data = await store.contract.methods\n    .redeem(secretHash, secret)\n    .encodeABI();\n  const rc = await BCInteract(web3, store, data, \"0\", \"1000000\");\n  return rc;\n};\n\nexport default redeem;\n","import invokeContract from \"./util/invokeContract\";\n\nconst refund = async (store, hashedSecret) => {\n  const res = await invokeContract(\n    store,\n    0,\n    \"refund\",\n    `${hashedSecret}`,\n    100000\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default refund;\n","import getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport initWait from \"../tezos/operations/initiateWait\";\nimport createSecrets from \"./createSecrets\";\nimport addCounterParty from \"../tezos/operations/addCounterParty\";\nimport redeem from \"../ethereum/operations/redeem\";\nimport refund from \"../tezos/operations/refund\";\n\nconst waitCompletion = (secret, tezStore, ethStore, refundTime, update) => {\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(tezStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapEth(ethStore, secret.hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp.participant !== ethStore.keyStore.address) return;\n    clearInterval(tid);\n    console.log(\"\\nCOMPLETING SWAP\");\n    await redeem(ethStore.web3, ethStore, secret.hashedSecret, secret.secret);\n    update(secret.hashedSecret, 3);\n  }, 180000);\n};\n\nconst requestTezos = async (amount, ethStore, tezStore, update) => {\n  // generate swap secret\n  const secret = createSecrets();\n  console.log(\"Your SWAP Secret (XTZ->ETH): \", secret);\n\n  // create new swap with refund time set to 2hrs\n  const refundTime = Math.trunc(Date.now() / 1000) + 7200;\n  const status = await initWait(\n    tezStore,\n    ethStore.keyStore.address,\n    amount * 1000000 + \"\",\n    secret.hashedSecret,\n    refundTime\n  );\n\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP Generated : \");\n  const swap = await getSwapTez(secret.hashedSecret);\n  console.log(JSON.stringify(swap));\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(tezStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapEth(ethStore, secret.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp.initiator_tez === \"\" && swp.refundTimestamp === \"0\") return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(tezStore, swp.initiator_tez, secret.hashedSecret);\n    update(secret.hashedSecret, 2);\n    waitCompletion(secret, tezStore, ethStore, refundTime, update);\n  }, 180000);\n\n  return {\n    hashedSecret: secret.hashedSecret,\n    value: amount + \" XTZ\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default requestTezos;\n","import BCInteract from \"./bc-intereraction\";\n\nconst initWait = async (\n  web3,\n  store,\n  secret,\n  refundTime,\n  tezAcc,\n  amtInEther\n) => {\n  const data = await store.contract.methods\n    .initiateWait(secret, tezAcc, refundTime)\n    .encodeABI();\n  const rc = await BCInteract(web3, store, data, amtInEther, \"1000000\");\n  return rc;\n};\n\nexport default initWait;\n","import BCInteract from \"./bc-intereraction\";\n\nconst addCoutnerParty = async (web3, store, secret, ethAccount) => {\n  const data = await store.contract.methods\n    .addCounterParty(secret, ethAccount)\n    .encodeABI();\n  const rc = await BCInteract(web3, store, data, \"0\", \"1000000\");\n  return rc;\n};\n\nexport default addCoutnerParty;\n","import invokeContract from \"./util/invokeContract\";\n\nconst redeem = async (store, hashedSecret, secret) => {\n  const res = await invokeContract(\n    store,\n    0,\n    \"redeem\",\n    `(Pair ${hashedSecret} ${secret})`,\n    100000,\n    300\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default redeem;\n","const getRedeemedSecret = async (store, secretHash) => {\n  const data = await store.contract.getPastEvents(\"Redeemed\", {\n    filter: { _hashedSecret: secretHash },\n    fromBlock: 0,\n    toBlock: \"latest\",\n  });\n  return data[0].returnValues[\"_secret\"];\n};\n\nexport default getRedeemedSecret;\n","import BCInteract from \"./bc-intereraction\";\n\nconst refund = async (web3, store, secret) => {\n  const data = await store.contract.methods.refund(secret).encodeABI();\n  const rc = await BCInteract(web3, store, data, \"0\", \"1000000\");\n  return rc;\n};\n\nexport default refund;\n","import initWait from \"../ethereum/operations/initiateWait\";\nimport getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport addCounterParty from \"../ethereum/operations/addCounterParty\";\nimport redeem from \"../tezos/operations/redeem\";\nimport getRedeemedSecret from \"../ethereum/operations/getRedeemedSwap\";\nimport refund from \"../ethereum/operations/refund\";\n\nconst waitCompletion = (\n  hashedSecret,\n  ethStore,\n  tezStore,\n  refundTime,\n  update\n) => {\n  const id = setInterval(async () => {\n    const swp = await getSwapEth(ethStore, hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp.initiator_tez !== \"\" && swp.refundTimestamp !== \"0\") {\n      if (Math.trunc(Date.now() / 1000) >= refundTime) {\n        clearInterval(id);\n        await refund(ethStore.web3, ethStore, hashedSecret);\n        update(hashedSecret, 4);\n      }\n      return;\n    }\n    clearInterval(id);\n    console.log(\"\\nCOMPLETING SWAP\");\n    const secret = await getRedeemedSecret(ethStore, hashedSecret);\n    await redeem(tezStore, hashedSecret, secret);\n    update(hashedSecret, 3);\n  }, 180000);\n};\n\nconst respondTezos = async (amount, ethStore, tezStore, req_swap, update) => {\n  //create new swap response on ethereum\n  const refundTime = req_swap.refundTimestamp - 3600;\n  const status = await initWait(\n    ethStore.web3,\n    ethStore,\n    req_swap.hashedSecret,\n    refundTime,\n    tezStore.keyStore.publicKeyHash,\n    amount.toString()\n  );\n\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP GENERATED | HASH: \", req_swap.hashedSecret);\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(ethStore.web3, ethStore, req_swap.hashedSecret);\n      update(req_swap.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapTez(req_swap.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp.participant !== tezStore.keyStore.publicKeyHash) return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(\n      ethStore.web3,\n      ethStore,\n      req_swap.hashedSecret,\n      swp.initiator_eth\n    );\n    update(req_swap.hashedSecret, 2);\n    waitCompletion(\n      req_swap.hashedSecret,\n      ethStore,\n      tezStore,\n      refundTime,\n      update\n    );\n  }, 180000);\n\n  return {\n    hashedSecret: req_swap.hashedSecret,\n    value: amount + \" ETH\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default respondTezos;\n","import getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport initWait from \"../ethereum/operations/initiateWait\";\nimport createSecrets from \"./createSecrets\";\nimport addCounterParty from \"../ethereum/operations/addCounterParty\";\nimport redeem from \"../tezos/operations/redeem\";\nimport refund from \"../ethereum/operations/refund\";\n\nconst waitCompletion = (secret, tezStore, ethStore, refundTime, update) => {\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(ethStore.web3, ethStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapTez(secret.hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp.participant !== tezStore.keyStore.publicKeyHash) return;\n    clearInterval(tid);\n    console.log(\"\\nCOMPLETING SWAP\");\n    await redeem(tezStore, secret.hashedSecret, secret.secret);\n    update(secret.hashedSecret, 3);\n  }, 180000);\n};\n\nconst requestEth = async (amount, ethStore, tezStore, update) => {\n  // generate swap secret\n  const secret = createSecrets();\n  console.log(\"Your SWAP Secret (XTZ->ETH): \", secret);\n\n  // create new swap with refund time set to 2hrs\n  const refundTime = Math.trunc(Date.now() / 1000) + 7200;\n  const status = await initWait(\n    ethStore.web3,\n    ethStore,\n    secret.hashedSecret,\n    refundTime,\n    tezStore.keyStore.publicKeyHash,\n    amount + \"\"\n  );\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP Generated : \");\n  const swap = await getSwapEth(ethStore, secret.hashedSecret);\n  console.log(JSON.stringify(swap));\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(ethStore.web3, ethStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapTez(secret.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp === undefined) return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(\n      ethStore.web3,\n      ethStore,\n      secret.hashedSecret,\n      swp.initiator_eth\n    );\n    update(secret.hashedSecret, 2);\n    waitCompletion(secret, tezStore, ethStore, refundTime, update);\n  }, 180000);\n\n  return {\n    hashedSecret: secret.hashedSecret,\n    value: amount + \" ETH\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default requestEth;\n","import { ConseilDataClient } from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\n\nconst parseValue = (e) => {\n  const splt = e.parameters.split(\" \");\n  return {\n    ...e,\n    parameters: {\n      hashedSecret: splt[1],\n      secret: splt[2],\n    },\n  };\n};\n\nconst getRedeemedSecret = async (hashedSecret) => {\n  const data = await ConseilDataClient.executeEntityQuery(\n    config.tezos.conseilServer,\n    \"tezos\",\n    config.tezos.network,\n    \"operations\",\n    {\n      fields: [\"timestamp\", \"source\", \"parameters_entrypoints\", \"parameters\"],\n      predicates: [\n        {\n          field: \"kind\",\n          operation: \"eq\",\n          set: [\"transaction\"],\n          inverse: false,\n        },\n        {\n          field: \"timestamp\",\n          operation: \"after\",\n          set: [1599984675000],\n          inverse: false,\n        },\n        { field: \"status\", operation: \"eq\", set: [\"applied\"], inverse: false },\n        {\n          field: \"destination\",\n          operation: \"eq\",\n          set: [\"KT1T92mZgyZZtVqRG1XfyeqDsPbGe66tPFyV\"],\n          inverse: false,\n        },\n        {\n          field: \"parameters_entrypoints\",\n          operation: \"eq\",\n          set: [\"redeem\"],\n          inverse: false,\n        },\n      ],\n      orderBy: [{ field: \"timestamp\", direction: \"desc\" }],\n      aggregation: [],\n      limit: 1000,\n    }\n  );\n  for (let i = 0; i < data.length; ++i) {\n    const swp = parseValue(data[i]);\n    if (swp.parameters.hashedSecret === hashedSecret)\n      return swp.parameters.secret;\n  }\n  return \"\";\n};\n\nexport default getRedeemedSecret;\n","import initWait from \"../tezos/operations/initiateWait\";\nimport getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport addCounterParty from \"../tezos/operations/addCounterParty\";\nimport redeem from \"../ethereum/operations/redeem\";\nimport getRedeemedSecret from \"../tezos/operations/getRedeemedSwap\";\nimport refund from \"../tezos/operations/refund\";\n\nconst waitCompletion = (\n  hashedSecret,\n  ethStore,\n  tezStore,\n  refundTime,\n  update\n) => {\n  const id = setInterval(async () => {\n    const swp = await getSwapTez(hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp !== undefined) {\n      if (Math.trunc(Date.now() / 1000) >= refundTime) {\n        clearInterval(id);\n        await refund(tezStore, hashedSecret);\n        update(hashedSecret, 4);\n      }\n      return;\n    }\n    clearInterval(id);\n    console.log(\"\\nCOMPLETING SWAP\");\n    const secret = await getRedeemedSecret(hashedSecret);\n    await redeem(ethStore.web3, ethStore, hashedSecret, secret);\n    update(hashedSecret, 3);\n  }, 180000);\n};\n\nconst respondEth = async (amount, ethStore, tezStore, req_swap, update) => {\n  //create new swap response on ethereum\n  const refundTime = req_swap.refundTimestamp - 3600;\n  const status = await initWait(\n    tezStore,\n    ethStore.keyStore.address,\n    Math.round(amount * 1000000) + \"\",\n    req_swap.hashedSecret,\n    refundTime\n  );\n\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP GENERATED | HASH: \", req_swap.hashedSecret);\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(tezStore, req_swap.hashedSecret);\n      update(req_swap.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapEth(ethStore, req_swap.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp.participant !== ethStore.keyStore.address) return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(tezStore, swp.initiator_tez, req_swap.hashedSecret);\n    update(req_swap.hashedSecret, 2);\n    waitCompletion(\n      req_swap.hashedSecret,\n      ethStore,\n      tezStore,\n      refundTime,\n      update\n    );\n  }, 180000);\n\n  return {\n    hashedSecret: req_swap.hashedSecret,\n    value: amount + \" XTZ\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default respondEth;\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Setup from \"./components/setup\";\nimport setEthAccount from \"./library/ethereum/account/setAccount\";\nimport setTezAccount from \"./library/tezos/account/setAccount\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/header\";\nimport Home from \"./components/home\";\nimport Ethereum from \"./components/newSwap/ethereum/index.jsx\";\nimport Swap from \"./components/newSwap\";\nimport Tezos from \"./components/newSwap/tezos\";\nimport requestTezos from \"./library/common/request-tezos\";\nimport respondTezos from \"./library/common/respond-tezos\";\nimport requestEth from \"./library/common/request-eth\";\nimport respondEth from \"./library/common/respond-eth\";\n\nconst App = () => {\n  const [ethStore, ethSetup] = useState(undefined);\n  const [tezStore, tezSetup] = useState(undefined);\n  const [swaps, updateSwaps] = useState(undefined);\n  const [, updateState] = React.useState();\n\n  const swapRef = useRef();\n  swapRef.current = swaps;\n  const ethRef = useRef();\n  ethRef.current = ethStore;\n  const tezRef = useRef();\n  tezRef.current = tezStore;\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const initialize = async (ethKey, tezKey) => {\n    try {\n      const eth = setEthAccount(ethKey);\n      const tez = await setTezAccount(tezKey);\n      ethSetup(eth);\n      tezSetup(tez);\n    } catch {\n      alert(\"Wrong keys\");\n    }\n  };\n\n  const update = (hash, state) => {\n    let newSwap = swapRef.current;\n    if (newSwap[hash] !== undefined) {\n      newSwap[hash].state = state;\n      updateSwaps(newSwap);\n      forceUpdate();\n    } else console.log(\"missing hash update request\");\n  };\n\n  const genSwap = async (type, value, req_swap = undefined) => {\n    let swap = {};\n    if (type === 2) {\n      if (req_swap === undefined) {\n        swap = await requestTezos(\n          value,\n          ethRef.current,\n          tezRef.current,\n          update\n        );\n      } else {\n        swap = await respondTezos(\n          value,\n          ethRef.current,\n          tezRef.current,\n          req_swap,\n          update\n        );\n      }\n    } else if (type === 1) {\n      if (req_swap === undefined) {\n        swap = await requestEth(value, ethRef.current, tezRef.current, update);\n      } else {\n        swap = await respondEth(\n          value,\n          ethRef.current,\n          tezRef.current,\n          req_swap,\n          update\n        );\n      }\n    }\n    if (swap === undefined) return false;\n    let newSwaps = swaps;\n    if (newSwaps === undefined) {\n      newSwaps = {};\n    }\n    newSwaps[swap.hashedSecret] = swap;\n    updateSwaps(newSwaps);\n    return true;\n  };\n\n  if (ethStore === undefined || tezStore === undefined)\n    return (\n      <div className=\"App\">\n        <Setup init={initialize} />\n      </div>\n    );\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Header ethStore={ethStore} tezStore={tezStore} />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home swaps={swaps} />\n          </Route>\n          <Route exact path=\"/create/eth\">\n            <Ethereum\n              genSwap={genSwap}\n              selfAcc={tezStore.keyStore.publicKeyHash}\n            />\n          </Route>\n          <Route exact path=\"/create/xtz\">\n            <Tezos genSwap={genSwap} ethStore={ethStore} />\n          </Route>\n          <Route exact path=\"/create\">\n            <Swap />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import config from \"../../../globalConfig.json\";\nimport { Transaction } from \"ethereumjs-tx\";\n\nconst interact = async (\n  web3,\n  store,\n  data,\n  ether,\n  gas,\n  to = config.ethereum.contractAddr,\n  chain = config.ethereum.chain\n) => {\n  return new Promise((resolve) => {\n    try {\n      web3.eth.getBlock(\"latest\", false, (error, result) => {\n        var _gasLimit = result.gasLimit;\n        try {\n          web3.eth.getGasPrice((error, result) => {\n            var _gasPrice = result;\n            try {\n              const privateKey = Buffer.from(store.keyStore.privateKey, \"hex\");\n\n              var _hex_gasLimit = web3.utils.toHex(\n                (_gasLimit + 1000000).toString()\n              );\n              var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());\n              var _hex_Gas = web3.utils.toHex(gas);\n\n              web3.eth\n                .getTransactionCount(store.keyStore.address)\n                .then((nonce) => {\n                  var _hex_nonce = web3.utils.toHex(nonce);\n\n                  const rawTx = {\n                    nonce: _hex_nonce,\n                    from: store.keyStore.address,\n                    gasPrice: _hex_gasPrice,\n                    gasLimit: _hex_gasLimit,\n                    gas: _hex_Gas,\n                    value: web3.utils.toHex(web3.utils.toWei(ether, \"ether\")),\n                    data: data,\n                  };\n                  if (to !== \"\") rawTx[\"to\"] = to;\n                  const tx = new Transaction(rawTx, { chain: chain });\n                  tx.sign(privateKey);\n                  var serializedTx = \"0x\" + tx.serialize().toString(\"hex\");\n                  web3.eth\n                    .sendSignedTransaction(serializedTx.toString(\"hex\"))\n                    .on(\"transactionHash\", (transactionHash) => {\n                      console.log(\"ETH TX HASH : \", transactionHash);\n                    })\n                    .then((contract) => {\n                      if (contract.contractAddress != null)\n                        resolve(contract.contractAddress);\n                      resolve(true);\n                    })\n                    .catch((error) => {\n                      console.error(\"ETH TX ERROR : \", error);\n                      resolve(false);\n                    });\n                });\n            } catch (error) {\n              console.error(\"ETH TX ERROR : \", error);\n              resolve(false);\n            }\n          });\n        } catch (error) {\n          console.error(\"ETH TX ERROR : \", error);\n          resolve(false);\n        }\n      });\n    } catch (error) {\n      console.error(\"ETH TX ERROR : \", error);\n      resolve(false);\n    }\n  });\n};\n\nexport default interact;\n"],"sourceRoot":""}