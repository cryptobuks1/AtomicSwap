{"version":3,"sources":["library/tezos/operations/getSwap.js","components/setup/style.js","components/setup/index.jsx","library/ethereum/account/setAccount.js","library/tezos/account/setAccount.js","library/ethereum/account/getAccountBalance.js","library/tezos/account/getAccountBalance.js","components/header/style.js","components/header/index.jsx","components/home/style.js","components/home/index.jsx","library/common/getConversionRate.js","library/tezos/operations/getSwaps.js","components/newSwap/style.js","components/loader/style.js","components/loader/index.jsx","components/newSwap/ethereum/createSwap/index.jsx","components/newSwap/ethereum/getSwaps/index.jsx","components/newSwap/ethereum/index.jsx","components/newSwap/index.jsx","library/ethereum/operations/getSwaps.js","components/newSwap/tezos/createSwap/index.jsx","components/newSwap/tezos/getSwaps/index.jsx","components/newSwap/tezos/index.jsx","library/ethereum/operations/getSwap.js","library/tezos/operations/util/invokeContract.js","library/tezos/operations/initiateWait.js","library/common/createSecrets.js","library/tezos/operations/addCounterParty.js","library/ethereum/operations/redeem.js","library/tezos/operations/refund.js","library/common/request-tezos.js","library/ethereum/operations/initiateWait.js","library/ethereum/operations/addCounterParty.js","library/tezos/operations/redeem.js","library/ethereum/operations/getRedeemedSwap.js","library/ethereum/operations/refund.js","library/common/respond-tezos.js","library/common/request-eth.js","library/tezos/operations/getRedeemedSwap.js","library/common/respond-eth.js","App.js","serviceWorker.js","index.js","library/ethereum/operations/bc-intereraction.js"],"names":["getSwap","secretHash","a","substring","packedKey","TezosMessageUtils","encodeBigMapKey","Buffer","from","writePackedData","TezosNodeReader","getValueForBigMapKey","config","tezos","RPC","undefined","jsonData","hashedSecret","JSONPath","path","json","initiator","initiator_eth","participant","refundTimestamp","Number","Math","round","Date","getTime","state","value","useStyles","makeStyles","theme","container","width","form","display","flexDirection","margin","padding","border","borderRadius","input","fontSize","submit","color","fontWeight","backgroundColor","cursor","intro","title","fontFamily","Setup","init","classes","className","onSubmit","e","preventDefault","target","eth","tez","type","placeholder","name","setEthAccount","key","web3","Web3","providers","HttpProvider","ethereum","keyStore","accounts","privateKeyToAccount","privateKey","contract","Contract","abi","contractAddr","setTezAccount","tezSetup","KeyStoreUtils","restoreIdentityFromSecretKey","SoftSigner","createSigner","writeKeyWithHint","signer","accountBalanceEth","address","getBalance","balance","accountBalanceTez","getSpendableBalanceForAccount","result","header","justifyContent","account","button","marginBottom","Header","ethStore","tezStore","useState","setBalance","history","useHistory","updateBalance","publicKeyHash","pow","useEffect","timer","setInterval","clearInterval","onClick","push","background","swaps","swap","lineHeight","Home","data","Object","keys","map","refundTime","SwapItem","getConvertionRate","tezosNode","chain_id","xtzPrice","ethPrice","parseValue","michelsonData","michelineData","TezosLanguageUtil","translateMichelsonToMicheline","JSON","parse","readAddress","getSwaps","ConseilDataClient","executeEntityQuery","conseilServer","network","fields","predicates","field","operation","ConseilOperator","EQ","set","inverse","ISNULL","orderBy","direction","ConseilSortDirection","DESC","aggregation","limit","forEach","select","selectButton","expectedValue","create","valueInput","marginRight","msg","loader","Loader","message","CircularProgress","size","CreateSwap","genSwap","rate","setRate","setInput","getConversionRate","then","res","console","log","rt","generateSwap","alert","step","min","onInput","GetSwap","selfAcc","setSwaps","setLoader","fullLoader","setFullLoader","filterSwaps","swps","swp","trunc","now","displayValue","pay","length","Ethereum","Swap","store","methods","getAllSwaps","call","dispValue","Tezos","invokeContract","amtInMuTez","entry_point","parameters","extraGas","extraStorage","Promise","resolve","reject","TezosNodeWriter","testContractInvocationOperation","TezosParameterFormat","Michelson","gas","freight","storageCost","sendContractInvocationOperation","groupid","replace","TezosConseilClient","awaitOperationConfirmation","catch","err","initWait","ethAddress","amtMuTez","time","status","createSecrets","rand","crypto","randomBytes","hash","createHash","update","digest","secret","toString","addCounterParty","tezAccount","redeem","encodeABI","BCInteract","rc","refund","waitCompletion","tid","getSwapEth","requestTezos","amount","getSwapTez","stringify","initiator_tez","tezAcc","amtInEther","initiateWait","addCoutnerParty","ethAccount","getRedeemedSecret","getPastEvents","filter","_hashedSecret","fromBlock","toBlock","returnValues","id","respondTezos","req_swap","requestEth","splt","split","i","respondEth","App","ethSetup","updateSwaps","React","updateState","swapRef","useRef","current","ethRef","tezRef","forceUpdate","useCallback","initialize","ethKey","tezKey","newSwap","newSwaps","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","interact","ether","to","chain","getBlock","_gasLimit","gasLimit","getGasPrice","_gasPrice","_hex_gasLimit","utils","toHex","_hex_gasPrice","_hex_Gas","getTransactionCount","nonce","rawTx","gasPrice","toWei","tx","Transaction","sign","serializedTx","serialize","sendSignedTransaction","on","transactionHash","contractAddress"],"mappings":"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","file":"static/js/main.ef39e663.chunk.js","sourcesContent":["import { TezosNodeReader, TezosMessageUtils } from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\nimport { JSONPath } from \"jsonpath-plus\";\n\nconst getSwap = async (secretHash) => {\n  secretHash = secretHash.substring(2);\n  const packedKey = TezosMessageUtils.encodeBigMapKey(\n    Buffer.from(TezosMessageUtils.writePackedData(secretHash, \"bytes\"), \"hex\")\n  );\n  const jsonData = await TezosNodeReader.getValueForBigMapKey(\n    config.tezos.RPC,\n    15534,\n    packedKey\n  );\n  if (jsonData === undefined) return jsonData;\n  return {\n    hashedSecret:\n      \"0x\" +\n      JSONPath({\n        path: \"$.args[0].args[0].bytes\",\n        json: jsonData,\n      })[0],\n    initiator: JSONPath({\n      path: \"$.args[0].args[1].args[0].string\",\n      json: jsonData,\n    })[0],\n    initiator_eth: JSONPath({\n      path: \"$.args[0].args[1].args[1].string\",\n      json: jsonData,\n    })[0],\n    participant: JSONPath({\n      path: \"$.args[1].args[0].args[0].string\",\n      json: jsonData,\n    })[0],\n    refundTimestamp: Number(\n      Math.round(\n        new Date(\n          JSONPath({\n            path: \"$.args[1].args[0].args[1].string\",\n            json: jsonData,\n          })[0]\n        ).getTime() / 1000\n      )\n    ),\n    state: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[0].int\", json: jsonData })[0]\n    ),\n    value: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[1].int\", json: jsonData })[0]\n    ),\n  };\n};\n\nexport default getSwap;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"31%\",\n    margin: \"0 auto\",\n    padding: \"2vw 3vw 1vw 3vw\",\n    border: \"0.3vw black solid\",\n    borderRadius: \"1vw\",\n  },\n  input: { margin: \"1vw\", fontSize: \"1.2vw\" },\n  submit: {\n    color: \"white\",\n    width: \"fit-content\",\n    border: \"0.1vw black solid\",\n    margin: \"1vw auto\",\n    padding: \"0.5vw\",\n    fontWeight: \"bold\",\n    borderRadius: \"0.3vw\",\n    backgroundColor: \"black\",\n    cursor: \"pointer\",\n    fontSize: \"1.2vw\",\n  },\n  intro: {\n    margin: \"5vw\",\n    fontSize: \"1.5vw\",\n  },\n  title: {\n    fontFamily: \"'Pacifico', cursive\",\n    fontSize: \"5vw\",\n    margin: \"0\",\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport useStyles from \"./style\";\nconst Setup = ({ init }) => {\n  const setup = (e) => {\n    e.preventDefault();\n    init(e.target.eth.value, e.target.tez.value);\n  };\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <div className={classes.intro}>\n        <h1 className={classes.title}>Atomic Swap</h1>\n        <p>Cross-Chain Atomic Swaps for Ethereum and Tezos</p>\n        <p>\n          *Do not refresh or close the app during an running swap, your swaps\n          will be lost\n        </p>\n      </div>\n      <form className={classes.form} onSubmit={setup}>\n        <input\n          className={classes.input}\n          type=\"password\"\n          placeholder=\"ethereum private key\"\n          name=\"eth\"\n        />\n        <input\n          className={classes.input}\n          type=\"password\"\n          placeholder=\"tezos private key\"\n          name=\"tez\"\n        />\n        <input className={classes.submit} type=\"submit\" value=\"START\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Setup;\n","import Web3 from \"web3\";\nimport config from \"../../../globalConfig.json\";\n\nconst setEthAccount = (key) => {\n  const web3 = new Web3(new Web3.providers.HttpProvider(config.ethereum.RPC));\n  const keyStore = web3.eth.accounts.privateKeyToAccount(key);\n  keyStore.privateKey = keyStore.privateKey.substring(2);\n  const contract = new web3.eth.Contract(\n    config.ethereum.abi,\n    config.ethereum.contractAddr\n  );\n  return { web3, keyStore, contract };\n};\n\nexport default setEthAccount;\n","import { KeyStoreUtils, SoftSigner } from \"conseiljs-softsigner\";\nimport { TezosMessageUtils } from \"conseiljs\";\n\nconst setTezAccount = async (key, tezSetup) => {\n  const keyStore = await KeyStoreUtils.restoreIdentityFromSecretKey(key);\n  const signer = await SoftSigner.createSigner(\n    TezosMessageUtils.writeKeyWithHint(key, \"edsk\"),\n    -1\n  );\n  return { keyStore, signer };\n};\n\nexport default setTezAccount;\n","const accountBalanceEth = async (web3, address) => {\n  const balance = await web3.eth.getBalance(address); //Will give value in.\n  return balance;\n};\n\nexport default accountBalanceEth;\n","import { TezosNodeReader } from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\n\nconst accountBalanceTez = async (address) => {\n  const result = await TezosNodeReader.getSpendableBalanceForAccount(\n    config.tezos.RPC,\n    address\n  );\n  return result;\n};\n\nexport default accountBalanceTez;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    display: \"flex\",\n    padding: \"1.5vw\",\n    fontSize: \"1.5vw\",\n    justifyContent: \"space-between\",\n  },\n  account: {\n    padding: \"0.6vw\",\n    border: \"0.2vw black solid\",\n    borderRadius: \"2vw\",\n  },\n  button: {\n    color: \"white\",\n    border: \"none\",\n    cursor: \"pointer\",\n    padding: \"0.4vw 1vw\",\n    fontWeight: \"bold\",\n    borderRadius: \"0.5vw\",\n    backgroundColor: \"black\",\n    marginBottom: \"5vw\",\n    fontSize: \"1.4vw\",\n  },\n}));\n\nexport default useStyles;\n","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport accountBalanceEth from \"../../library/ethereum/account/getAccountBalance\";\nimport accountBalanceTez from \"../../library/tezos/account/getAccountBalance\";\nimport useStyles from \"./style\";\nimport { useHistory } from \"react-router-dom\";\nconst Header = ({ ethStore, tezStore }) => {\n  const [balance, setBalance] = useState({ eth: \"0 ETH\", tez: \"0 XTZ\" });\n  const classes = useStyles();\n  const history = useHistory();\n  const updateBalance = async () => {\n    let eth = await accountBalanceEth(ethStore.web3, ethStore.keyStore.address);\n    let tez = await accountBalanceTez(tezStore.keyStore.publicKeyHash);\n    eth = eth / Math.pow(10, 18);\n    tez = tez / 1000000;\n    setBalance({ eth: `${eth} ETH`, tez: `${tez} XTZ` });\n  };\n\n  useEffect(() => {\n    updateBalance();\n    const timer = setInterval(async () => {\n      await updateBalance();\n    }, 120000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [ethStore.keyStore.address, tezStore.keyStore.publicKeyHash]);\n\n  return (\n    <>\n      <div className={classes.header}>\n        <div className={classes.account}>\n          <p>Ethereum Addr.: {ethStore.keyStore.address}</p>\n          <p>Balance : {balance.eth}</p>\n        </div>\n        <div className={classes.account}>\n          <p>Tezos Addr.: {tezStore.keyStore.publicKeyHash}</p>\n          <p>Balance : {balance.tez}</p>\n        </div>\n      </div>\n      <button className={classes.button} onClick={() => history.push(\"/\")}>\n        Home\n      </button>\n    </>\n  );\n};\n\nexport default Header;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    color: \"white\",\n    border: \"none\",\n    cursor: \"pointer\",\n    padding: \"1vw\",\n    background: \"black\",\n    fontWeight: \"bold\",\n    borderRadius: \"1vw\",\n    fontSize: \"1.5vw\",\n  },\n  swaps: { margin: \"2.5vw\", padding: \"2vw\" },\n  swap: {\n    color: \"white\",\n    width: \"fit-content\",\n    border: \"0.2vw black solid\",\n    margin: \"3vw auto\",\n    padding: \"0.5vw 2vw\",\n    lineHeight: \"1.7vw\",\n    borderRadius: \"4vw\",\n    backgroundColor: \"black\",\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"./style\";\n\nconst Home = ({ swaps }) => {\n  const history = useHistory();\n  const classes = useStyles();\n  const SwapItem = (data) => {\n    return (\n      <div className={classes.swap} key={data.hashedSecret}>\n        <p>Hash : {data.hashedSecret}</p>\n        <p>Value : {data.value}</p>\n        <p>Expiry Time : {data.refundTime}</p>\n        <p>State : {data.state}</p>\n      </div>\n    );\n  };\n  let data = <p>No Swaps Created Yet!</p>;\n  if (swaps !== undefined)\n    data = Object.keys(swaps).map((key) => SwapItem(swaps[key]));\n  return (\n    <div>\n      <button\n        className={classes.button}\n        onClick={() => history.push(\"/create\")}\n      >\n        Start New Swap\n      </button>\n      <div className={classes.swaps}>\n        <h3>Your Swaps</h3>\n        {data}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { TezosNodeReader } from \"conseiljs\";\nimport config from \"../../globalConfig.json\";\nimport { JSONPath } from \"jsonpath-plus\";\n\nconst getConvertionRate = async () => {\n  let data = await TezosNodeReader.getValueForBigMapKey(\n    config.tezos.tezosNode,\n    14981,\n    \"exprukkbxD4rqiYFhFNSkLHfyEfbVEMirvDS9naHRjGKbzPsREJfmc\",\n    undefined,\n    config.tezos.chain_id\n  );\n  const xtzPrice = Number(\n    JSONPath({ path: \"$.args[0].args[0].int\", json: data })[0]\n  );\n  data = await TezosNodeReader.getValueForBigMapKey(\n    config.tezos.tezosNode,\n    14981,\n    \"exprv9NLX1skZHFM1i6eXc7eAazz25T1BVjkDzc47fWEEjn6y2Zsay\",\n    undefined,\n    config.tezos.chain_id\n  );\n  const ethPrice = Number(\n    JSONPath({ path: \"$.args[0].args[0].int\", json: data })[0]\n  );\n  return ethPrice / xtzPrice;\n};\n\nexport default getConvertionRate;\n","import {\n  ConseilDataClient,\n  ConseilOperator,\n  ConseilSortDirection,\n  TezosLanguageUtil,\n  TezosMessageUtils,\n} from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\nimport { JSONPath } from \"jsonpath-plus\";\n\nconst parseValue = (michelsonData) => {\n  const michelineData = TezosLanguageUtil.translateMichelsonToMicheline(\n    michelsonData\n  );\n  const jsonData = JSON.parse(michelineData);\n\n  return {\n    hashedSecret:\n      \"0x\" +\n      JSONPath({\n        path: \"$.args[0].args[0].bytes\",\n        json: jsonData,\n      })[0],\n    initiator: TezosMessageUtils.readAddress(\n      JSONPath({ path: \"$.args[0].args[1].args[0].bytes\", json: jsonData })[0]\n    ),\n    initiator_eth: JSONPath({\n      path: \"$.args[0].args[1].args[1].string\",\n      json: jsonData,\n    })[0],\n    participant: TezosMessageUtils.readAddress(\n      JSONPath({ path: \"$.args[1].args[0].args[0].bytes\", json: jsonData })[0]\n    ),\n    refundTimestamp: Number(\n      JSONPath({ path: \"$.args[1].args[0].args[1].int\", json: jsonData })[0]\n    ),\n    state: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[0].int\", json: jsonData })[0]\n    ),\n    value: Number(\n      JSONPath({ path: \"$.args[1].args[1].args[1].int\", json: jsonData })[0]\n    ),\n  };\n};\n\nconst getSwaps = async () => {\n  const data = await ConseilDataClient.executeEntityQuery(\n    config.tezos.conseilServer,\n    \"tezos\",\n    config.tezos.network,\n    \"big_map_contents\",\n    {\n      fields: [\"key\", \"key_hash\", \"operation_group_id\", \"big_map_id\", \"value\"],\n      predicates: [\n        {\n          field: \"big_map_id\",\n          operation: ConseilOperator.EQ,\n          set: [\"15534\"],\n          inverse: false,\n        },\n        {\n          field: \"value\",\n          operation: ConseilOperator.ISNULL,\n          set: [\"\"],\n          inverse: true,\n        },\n      ],\n      orderBy: [{ field: \"key\", direction: ConseilSortDirection.DESC }],\n      aggregation: [],\n      limit: 1000,\n    }\n  );\n  let swaps = [];\n  data.forEach((e) => {\n    if (e.value !== null) swaps.push(parseValue(e.value));\n  });\n  return swaps;\n};\n\nexport default getSwaps;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"30%\",\n    margin: \"2% auto\",\n  },\n  selectButton: {\n    margin: \"1.5vw\",\n    padding: \"4vw\",\n    backgroundColor: \"black\",\n    borderRadius: \"0.6vw\",\n    color: \"white\",\n    fontSize: \"2.5vw\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\",\n    border: \"0.2vw solid black\",\n    \"&:hover\": {\n      backgroundColor: \"white\",\n      color: \"black\",\n    },\n  },\n  expectedValue: { display: \"block\", margin: \"3vw\" },\n  create: {\n    backgroundColor: \"black\",\n    border: \"none\",\n    borderRadius: \"0.5vw\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    padding: \"0.4vw 1vw\",\n    cursor: \"pointer\",\n  },\n  valueInput: { marginRight: \"1vw\", padding: \"0.2vw\" },\n  swap: {\n    color: \"white\",\n    width: \"fit-content\",\n    border: \"0.2vw black solid\",\n    margin: \"3vw auto\",\n    padding: \"0.5vw 2vw\",\n    lineHeight: \"1.7vw\",\n    borderRadius: \"4vw\",\n    backgroundColor: \"black\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      backgroundColor: \"white\",\n      color: \"black\",\n    },\n  },\n  msg: {\n    margin: \"4vw 1vw\",\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  loader: {\n    color: \"black\",\n    fontSize: \"2vw\",\n  },\n  msg: { margin: \"2vw\", fontSize: \"1.5vw\" },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport useStyles from \"./style\";\n\nconst Loader = ({ message }) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <CircularProgress className={classes.loader} size={60} />\n      <p className={classes.msg}>{message}</p>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\n\nconst CreateSwap = ({ genSwap, loader }) => {\n  const [rate, setRate] = useState(0);\n  const [input, setInput] = useState(0);\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      setRate(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      setRate(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const generateSwap = async (e) => {\n    e.preventDefault();\n    if (e.target.eth.value === \"\" || e.target.eth.value === 0) return;\n    loader(true);\n    const res = await genSwap(1, e.target.eth.value);\n    loader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  return (\n    <>\n      <form onSubmit={generateSwap}>\n        <input\n          type=\"number\"\n          placeholder=\"Amount in ETH\"\n          name=\"eth\"\n          step=\".0001\"\n          min=\"0\"\n          onInput={(e) => setInput(e.target.value)}\n          className={classes.valueInput}\n        />\n        <input className={classes.create} type=\"submit\" value=\"CREATE\" />\n      </form>\n      <div>\n        <p className={classes.expectedValue}>\n          Expected XTZ Value : {input * rate} XTZ\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default CreateSwap;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport getSwaps from \"../../../../library/tezos/operations/getSwaps\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\nimport Loader from \"../../../loader\";\nimport CreateSwap from \"../createSwap\";\n\nconst GetSwap = ({ genSwap, selfAcc }) => {\n  const [swaps, setSwaps] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const [fullLoader, setFullLoader] = useState(false);\n  const history = useHistory();\n  const classes = useStyles();\n\n  const filterSwaps = async (rt) => {\n    const data = await getSwaps();\n    let swps = [];\n    data.forEach((swp) => {\n      if (\n        swp.participant === swp.initiator &&\n        swp.initiator !== selfAcc &&\n        Math.trunc(Date.now() / 1000) < swp.refundTimestamp - 4200\n      )\n        swps.push({\n          ...swp,\n          displayValue: swp.value / 1000000,\n          pay: swp.value / (rt * 1000000),\n        });\n    });\n    setSwaps(swps);\n    setLoader(false);\n  };\n\n  const SwapItem = (data) => {\n    return (\n      <div\n        onClick={() => {\n          generateSwap(data.pay, data);\n        }}\n        key={data.hashedSecret}\n        className={classes.swap}\n      >\n        <p>Hash : {data.hashedSecret}</p>\n        <p>XTZ Value : {data.displayValue}</p>\n        <p>ETH to Pay : {data.pay}</p>\n      </div>\n    );\n  };\n\n  const generateSwap = async (value, data) => {\n    setFullLoader(true);\n    const res = await genSwap(2, value, data);\n    setFullLoader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      filterSwaps(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      filterSwaps(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  let data = \"No Swaps Found. Create One!\";\n  if (swaps.length > 0) data = swaps.map((swp) => SwapItem(swp));\n  if (fullLoader) return <Loader message=\"..Creating Your Swap..\" />;\n  return (\n    <div>\n      <CreateSwap genSwap={genSwap} loader={setFullLoader} />\n      <h3>Or</h3>\n      <h3 className={classes.msg}>Select From Available SWAPS</h3>\n      {loader && <Loader message=\"..Loading Swaps..\" />}\n      {!loader && data}\n    </div>\n  );\n};\n\nexport default GetSwap;\n","import React from \"react\";\nimport GetSwap from \"./getSwaps\";\n\nconst Ethereum = ({ genSwap, selfAcc }) => {\n  return <GetSwap genSwap={genSwap} selfAcc={selfAcc} />;\n};\n\nexport default Ethereum;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"./style\";\n\nconst Swap = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  return (\n    <div className={classes.select}>\n      <button\n        className={classes.selectButton}\n        onClick={() => history.push(\"/create/xtz\")}\n      >\n        XTZ-&gt;ETH\n      </button>\n      <button\n        className={classes.selectButton}\n        onClick={() => history.push(\"/create/eth\")}\n      >\n        ETH-&gt;XTZ\n      </button>\n    </div>\n  );\n};\n\nexport default Swap;\n","const getSwaps = async (store) => {\n  const swaps = await store.contract.methods.getAllSwaps().call();\n  return swaps;\n};\n\nexport default getSwaps;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\n\nconst CreateSwap = ({ genSwap, loader }) => {\n  const [rate, setRate] = useState(0);\n  const [input, setInput] = useState(0);\n  const history = useHistory();\n  const classes = useStyles();\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      setRate(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      setRate(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const generateSwap = async (e) => {\n    e.preventDefault();\n    if (e.target.tez.value === \"\" || e.target.tez.value === 0) return;\n    loader(true);\n    const res = await genSwap(2, e.target.tez.value);\n    loader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  return (\n    <>\n      <form onSubmit={generateSwap}>\n        <input\n          type=\"number\"\n          placeholder=\"Amount in XTZ\"\n          name=\"tez\"\n          step=\".0001\"\n          min=\"0\"\n          onInput={(e) => setInput(e.target.value)}\n          className={classes.valueInput}\n        />\n        <input className={classes.create} type=\"submit\" value=\"CREATE\" />\n      </form>\n      <div>\n        <p className={classes.expectedValue}>\n          Expected ETH Value : {input / rate} ETH\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default CreateSwap;\n","import React, { useEffect, useState } from \"react\";\nimport getConversionRate from \"../../../../library/common/getConversionRate\";\nimport getSwaps from \"../../../../library/ethereum/operations/getSwaps\";\nimport { useHistory } from \"react-router-dom\";\nimport useStyles from \"../../style\";\nimport CreateSwap from \"../createSwap\";\nimport Loader from \"../../../loader\";\n\nconst GetSwap = ({ genSwap, ethStore }) => {\n  const [swaps, setSwaps] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const [fullLoader, setFullLoader] = useState(false);\n\n  const history = useHistory();\n  const classes = useStyles();\n  const filterSwaps = async (rt) => {\n    const data = await getSwaps(ethStore);\n    let swps = [];\n    data.forEach((swp) => {\n      if (\n        swp.participant === swp.initiator &&\n        swp.initiator !== ethStore.keyStore.address &&\n        Math.trunc(Date.now() / 1000) < swp.refundTimestamp - 4200\n      )\n        swps.push({\n          ...swp,\n          dispValue: swp.value / Math.pow(10, 18),\n          pay: (swp.value * rt) / Math.pow(10, 18),\n        });\n    });\n    setSwaps(swps);\n    setLoader(false);\n  };\n\n  const SwapItem = (data) => {\n    return (\n      <div\n        onClick={() => {\n          generateSwap(data.pay, data);\n        }}\n        key={data.hashedSecret}\n        className={classes.swap}\n      >\n        <p>Hash : {data.hashedSecret}</p>\n        <p>ETH Value : {data.dispValue}</p>\n        <p>XTZ to Pay : {data.pay}</p>\n      </div>\n    );\n  };\n\n  const generateSwap = async (value, data) => {\n    setFullLoader(true);\n    const res = await genSwap(1, value, data);\n    setFullLoader(false);\n    if (!res) {\n      alert(\"Error: Swap Couldn't be created\");\n    } else {\n      history.push(\"/\");\n    }\n  };\n  useEffect(() => {\n    getConversionRate().then((res) => {\n      filterSwaps(res);\n    });\n    console.log(\"Rate Updated\");\n    const timer = setInterval(async () => {\n      const rt = await getConversionRate();\n      filterSwaps(rt);\n    }, 600000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  let data = \"No Swaps Found. Create One!\";\n  if (swaps.length > 0) data = swaps.map((swp) => SwapItem(swp));\n  if (fullLoader) return <Loader message=\"..Creating Your Swap..\" />;\n  return (\n    <div>\n      <CreateSwap genSwap={genSwap} loader={setFullLoader} />\n      <h3>Or</h3>\n      <h3 className={classes.msg}>Select From Available SWAPS</h3>\n      {loader && <Loader message=\"..Loading Swaps..\" />}\n      {!loader && data}\n    </div>\n  );\n};\n\nexport default GetSwap;\n","import React from \"react\";\nimport GetSwap from \"./getSwaps\";\n\nconst Tezos = ({ genSwap, ethStore }) => {\n  return <GetSwap genSwap={genSwap} ethStore={ethStore} />;\n};\n\nexport default Tezos;\n","const getSwap = async (store, secretHash) => {\n  const swap = await store.contract.methods.swaps(secretHash).call();\n  return swap;\n};\n\nexport default getSwap;\n","import {\n  TezosConseilClient,\n  TezosNodeWriter,\n  TezosParameterFormat,\n} from \"conseiljs\";\nimport config from \"../../../../globalConfig.json\";\n\nconst invokeContract = (\n  store,\n  amtInMuTez,\n  entry_point,\n  parameters,\n  extraGas = 300,\n  extraStorage = 50\n) => {\n  return new Promise((resolve, reject) => {\n    const fee = 105000,\n      storage_limit = 6000,\n      gas_limit = 1000000;\n    TezosNodeWriter.testContractInvocationOperation(\n      config.tezos.RPC,\n      config.tezos.chain_id,\n      store.keyStore,\n      config.tezos.contractAddr,\n      amtInMuTez,\n      fee,\n      storage_limit,\n      gas_limit,\n      entry_point,\n      parameters,\n      TezosParameterFormat.Michelson\n    )\n      .then(({ gas, storageCost: freight }) => {\n        console.log(gas + extraGas, freight, ~~((gas + extraGas) / 10 + 300));\n        return TezosNodeWriter.sendContractInvocationOperation(\n          config.tezos.RPC,\n          store.signer,\n          store.keyStore,\n          config.tezos.contractAddr,\n          amtInMuTez,\n          200000,\n          freight + extraStorage,\n          gas + extraGas,\n          entry_point,\n          parameters,\n          TezosParameterFormat.Michelson\n        );\n      })\n      .then((result) => {\n        const groupid = result[\"operationGroupID\"]\n          .replace(/\"/g, \"\")\n          .replace(/\\n/, \"\"); // clean up RPC output\n        return TezosConseilClient.awaitOperationConfirmation(\n          config.tezos.conseilServer,\n          config.tezos.network,\n          groupid,\n          2\n        );\n      })\n      .then(resolve)\n      .catch((err) => {\n        console.log(err);\n        reject(err);\n      });\n  });\n};\n\nexport default invokeContract;\n","import invokeContract from \"./util/invokeContract\";\n\nconst initWait = async (store, ethAddress, amtMuTez, hashedSecret, time) => {\n  const res = await invokeContract(\n    store,\n    amtMuTez,\n    \"initiateWait\",\n    `(Pair ${hashedSecret} (Pair \"${time}\" \"${ethAddress}\"))`,\n    10000,\n    300\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default initWait;\n","import crypto from \"crypto\";\n\nconst createSecrets = () => {\n  const rand = crypto.randomBytes(32);\n  let hash = crypto.createHash(\"sha256\").update(rand).digest();\n  hash = crypto.createHash(\"sha256\").update(hash).digest(\"hex\");\n  return {\n    hashedSecret: \"0x\" + hash,\n    secret: \"0x\" + rand.toString(\"hex\"),\n  };\n};\n\nexport default createSecrets;\n","import invokeContract from \"./util/invokeContract\";\n\nconst addCounterParty = async (store, tezAccount, hashedSecret) => {\n  const res = await invokeContract(\n    store,\n    0,\n    \"addCounterParty\",\n    `(Pair ${hashedSecret} \"${tezAccount}\")`,\n    100000\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default addCounterParty;\n","import BCInteract from \"./bc-intereraction\";\n\nconst redeem = async (web3, store, secretHash, secret) => {\n  const data = await store.contract.methods\n    .redeem(secretHash, secret)\n    .encodeABI();\n  const rc = await BCInteract(web3, store, data, \"0\", \"1000000\");\n  return rc;\n};\n\nexport default redeem;\n","import invokeContract from \"./util/invokeContract\";\n\nconst refund = async (store, hashedSecret) => {\n  const res = await invokeContract(\n    store,\n    0,\n    \"refund\",\n    `${hashedSecret}`,\n    100000\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default refund;\n","import getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport initWait from \"../tezos/operations/initiateWait\";\nimport createSecrets from \"./createSecrets\";\nimport addCounterParty from \"../tezos/operations/addCounterParty\";\nimport redeem from \"../ethereum/operations/redeem\";\nimport refund from \"../tezos/operations/refund\";\n\nconst waitCompletion = (secret, tezStore, ethStore, refundTime, update) => {\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(tezStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapEth(ethStore, secret.hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp.participant !== ethStore.keyStore.address) return;\n    clearInterval(tid);\n    console.log(\"\\nCOMPLETING SWAP\");\n    await redeem(ethStore.web3, ethStore, secret.hashedSecret, secret.secret);\n    update(secret.hashedSecret, 3);\n  }, 180000);\n};\n\nconst requestTezos = async (amount, ethStore, tezStore, update) => {\n  // generate swap secret\n  const secret = createSecrets();\n  console.log(\"Your SWAP Secret (XTZ->ETH): \", secret);\n\n  // create new swap with refund time set to 2hrs\n  const refundTime = Math.trunc(Date.now() / 1000) + 7200;\n  const status = await initWait(\n    tezStore,\n    ethStore.keyStore.address,\n    amount * 1000000 + \"\",\n    secret.hashedSecret,\n    refundTime\n  );\n\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP Generated : \");\n  const swap = await getSwapTez(secret.hashedSecret);\n  console.log(JSON.stringify(swap));\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(tezStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapEth(ethStore, secret.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp.initiator_tez === \"\" && swp.refundTimestamp === \"0\") return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(tezStore, swp.initiator_tez, secret.hashedSecret);\n    update(secret.hashedSecret, 2);\n    waitCompletion(secret, tezStore, ethStore, refundTime, update);\n  }, 180000);\n\n  return {\n    hashedSecret: secret.hashedSecret,\n    value: amount + \" XTZ\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default requestTezos;\n","import BCInteract from \"./bc-intereraction\";\n\nconst initWait = async (\n  web3,\n  store,\n  secret,\n  refundTime,\n  tezAcc,\n  amtInEther\n) => {\n  const data = await store.contract.methods\n    .initiateWait(secret, tezAcc, refundTime)\n    .encodeABI();\n  const rc = await BCInteract(web3, store, data, amtInEther, \"1000000\");\n  return rc;\n};\n\nexport default initWait;\n","import BCInteract from \"./bc-intereraction\";\n\nconst addCoutnerParty = async (web3, store, secret, ethAccount) => {\n  const data = await store.contract.methods\n    .addCounterParty(secret, ethAccount)\n    .encodeABI();\n  const rc = await BCInteract(web3, store, data, \"0\", \"1000000\");\n  return rc;\n};\n\nexport default addCoutnerParty;\n","import invokeContract from \"./util/invokeContract\";\n\nconst redeem = async (store, hashedSecret, secret) => {\n  const res = await invokeContract(\n    store,\n    0,\n    \"redeem\",\n    `(Pair ${hashedSecret} ${secret})`,\n    100000,\n    300\n  );\n  if (res.status !== \"applied\") {\n    return false;\n  }\n  return true;\n};\n\nexport default redeem;\n","const getRedeemedSecret = async (store, secretHash) => {\n  const data = await store.contract.getPastEvents(\"Redeemed\", {\n    filter: { _hashedSecret: secretHash },\n    fromBlock: 0,\n    toBlock: \"latest\",\n  });\n  return data[0].returnValues[\"_secret\"];\n};\n\nexport default getRedeemedSecret;\n","import BCInteract from \"./bc-intereraction\";\n\nconst refund = async (web3, store, secret) => {\n  const data = await store.contract.methods.refund(secret).encodeABI();\n  const rc = await BCInteract(web3, store, data, \"0\", \"1000000\");\n  return rc;\n};\n\nexport default refund;\n","import initWait from \"../ethereum/operations/initiateWait\";\nimport getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport addCounterParty from \"../ethereum/operations/addCounterParty\";\nimport redeem from \"../tezos/operations/redeem\";\nimport getRedeemedSecret from \"../ethereum/operations/getRedeemedSwap\";\nimport refund from \"../ethereum/operations/refund\";\n\nconst waitCompletion = (\n  hashedSecret,\n  ethStore,\n  tezStore,\n  refundTime,\n  update\n) => {\n  const id = setInterval(async () => {\n    const swp = await getSwapEth(ethStore, hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp.initiator_tez !== \"\" && swp.refundTimestamp !== \"0\") {\n      if (Math.trunc(Date.now() / 1000) >= refundTime) {\n        clearInterval(id);\n        await refund(ethStore.web3, ethStore, hashedSecret);\n        update(hashedSecret, 4);\n      }\n      return;\n    }\n    clearInterval(id);\n    console.log(\"\\nCOMPLETING SWAP\");\n    const secret = await getRedeemedSecret(ethStore, hashedSecret);\n    await redeem(tezStore, hashedSecret, secret);\n    update(hashedSecret, 3);\n  }, 180000);\n};\n\nconst respondTezos = async (amount, ethStore, tezStore, req_swap, update) => {\n  //create new swap response on ethereum\n  const refundTime = req_swap.refundTimestamp - 3600;\n  const status = await initWait(\n    ethStore.web3,\n    ethStore,\n    req_swap.hashedSecret,\n    refundTime,\n    tezStore.keyStore.publicKeyHash,\n    amount.toString()\n  );\n\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP GENERATED | HASH: \", req_swap.hashedSecret);\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(ethStore.web3, ethStore, req_swap.hashedSecret);\n      update(req_swap.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapTez(req_swap.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp.participant !== tezStore.keyStore.publicKeyHash) return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(\n      ethStore.web3,\n      ethStore,\n      req_swap.hashedSecret,\n      swp.initiator_eth\n    );\n    update(req_swap.hashedSecret, 2);\n    waitCompletion(\n      req_swap.hashedSecret,\n      ethStore,\n      tezStore,\n      refundTime,\n      update\n    );\n  }, 180000);\n\n  return {\n    hashedSecret: req_swap.hashedSecret,\n    value: amount + \" ETH\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default respondTezos;\n","import getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport initWait from \"../ethereum/operations/initiateWait\";\nimport createSecrets from \"./createSecrets\";\nimport addCounterParty from \"../ethereum/operations/addCounterParty\";\nimport redeem from \"../tezos/operations/redeem\";\nimport refund from \"../ethereum/operations/refund\";\n\nconst waitCompletion = (secret, tezStore, ethStore, refundTime, update) => {\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(ethStore.web3, ethStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapTez(secret.hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp.participant !== tezStore.keyStore.publicKeyHash) return;\n    clearInterval(tid);\n    console.log(\"\\nCOMPLETING SWAP\");\n    await redeem(tezStore, secret.hashedSecret, secret.secret);\n    update(secret.hashedSecret, 3);\n  }, 180000);\n};\n\nconst requestEth = async (amount, ethStore, tezStore, update) => {\n  // generate swap secret\n  const secret = createSecrets();\n  console.log(\"Your SWAP Secret (XTZ->ETH): \", secret);\n\n  // create new swap with refund time set to 2hrs\n  const refundTime = Math.trunc(Date.now() / 1000) + 7200;\n  const status = await initWait(\n    ethStore.web3,\n    ethStore,\n    secret.hashedSecret,\n    refundTime,\n    tezStore.keyStore.publicKeyHash,\n    amount + \"\"\n  );\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP Generated : \");\n  const swap = await getSwapEth(ethStore, secret.hashedSecret);\n  console.log(JSON.stringify(swap));\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(ethStore.web3, ethStore, secret.hashedSecret);\n      update(secret.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapTez(secret.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp === undefined) return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(\n      ethStore.web3,\n      ethStore,\n      secret.hashedSecret,\n      swp.initiator_eth\n    );\n    update(secret.hashedSecret, 2);\n    waitCompletion(secret, tezStore, ethStore, refundTime, update);\n  }, 180000);\n\n  return {\n    hashedSecret: secret.hashedSecret,\n    value: amount + \" ETH\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default requestEth;\n","import { ConseilDataClient } from \"conseiljs\";\nimport config from \"../../../globalConfig.json\";\n\nconst parseValue = (e) => {\n  const splt = e.parameters.split(\" \");\n  return {\n    ...e,\n    parameters: {\n      hashedSecret: splt[1],\n      secret: splt[2],\n    },\n  };\n};\n\nconst getRedeemedSecret = async (hashedSecret) => {\n  const data = await ConseilDataClient.executeEntityQuery(\n    config.tezos.conseilServer,\n    \"tezos\",\n    config.tezos.network,\n    \"operations\",\n    {\n      fields: [\"timestamp\", \"source\", \"parameters_entrypoints\", \"parameters\"],\n      predicates: [\n        {\n          field: \"kind\",\n          operation: \"eq\",\n          set: [\"transaction\"],\n          inverse: false,\n        },\n        {\n          field: \"timestamp\",\n          operation: \"after\",\n          set: [1599984675000],\n          inverse: false,\n        },\n        { field: \"status\", operation: \"eq\", set: [\"applied\"], inverse: false },\n        {\n          field: \"destination\",\n          operation: \"eq\",\n          set: [\"KT1T92mZgyZZtVqRG1XfyeqDsPbGe66tPFyV\"],\n          inverse: false,\n        },\n        {\n          field: \"parameters_entrypoints\",\n          operation: \"eq\",\n          set: [\"redeem\"],\n          inverse: false,\n        },\n      ],\n      orderBy: [{ field: \"timestamp\", direction: \"desc\" }],\n      aggregation: [],\n      limit: 1000,\n    }\n  );\n  for (let i = 0; i < data.length; ++i) {\n    const swp = parseValue(data[i]);\n    if (swp.parameters.hashedSecret === hashedSecret)\n      return swp.parameters.secret;\n  }\n  return \"\";\n};\n\nexport default getRedeemedSecret;\n","import initWait from \"../tezos/operations/initiateWait\";\nimport getSwapTez from \"../tezos/operations/getSwap\";\nimport getSwapEth from \"../ethereum/operations/getSwap\";\nimport addCounterParty from \"../tezos/operations/addCounterParty\";\nimport redeem from \"../ethereum/operations/redeem\";\nimport getRedeemedSecret from \"../tezos/operations/getRedeemedSwap\";\nimport refund from \"../tezos/operations/refund\";\n\nconst waitCompletion = (\n  hashedSecret,\n  ethStore,\n  tezStore,\n  refundTime,\n  update\n) => {\n  const id = setInterval(async () => {\n    const swp = await getSwapTez(hashedSecret);\n    console.log(\"WAITING TO COMPLETE SWAP\");\n    if (swp !== undefined) {\n      if (Math.trunc(Date.now() / 1000) >= refundTime) {\n        clearInterval(id);\n        await refund(tezStore, hashedSecret);\n        update(hashedSecret, 4);\n      }\n      return;\n    }\n    clearInterval(id);\n    console.log(\"\\nCOMPLETING SWAP\");\n    const secret = await getRedeemedSecret(hashedSecret);\n    await redeem(ethStore.web3, ethStore, hashedSecret, secret);\n    update(hashedSecret, 3);\n  }, 180000);\n};\n\nconst respondEth = async (amount, ethStore, tezStore, req_swap, update) => {\n  //create new swap response on ethereum\n  const refundTime = req_swap.refundTimestamp - 3600;\n  const status = await initWait(\n    tezStore,\n    ethStore.keyStore.address,\n    Math.round(amount * 1000000) + \"\",\n    req_swap.hashedSecret,\n    refundTime\n  );\n\n  if (!status) return undefined;\n\n  console.log(\"\\nSWAP GENERATED | HASH: \", req_swap.hashedSecret);\n\n  // watch swap response\n  const tid = setInterval(async () => {\n    if (Math.trunc(Date.now() / 1000) >= refundTime) {\n      clearInterval(tid);\n      await refund(tezStore, req_swap.hashedSecret);\n      update(req_swap.hashedSecret, 4);\n      return;\n    }\n    const swp = await getSwapEth(ethStore, req_swap.hashedSecret);\n    console.log(\"CHECKING FOR SWAP RESPONSE\");\n    if (swp.participant !== ethStore.keyStore.address) return;\n    clearInterval(tid);\n    console.log(\"\\nA SWAP RESPONSE FOUND : \\n\", swp);\n    await addCounterParty(tezStore, swp.initiator_tez, req_swap.hashedSecret);\n    update(req_swap.hashedSecret, 2);\n    waitCompletion(\n      req_swap.hashedSecret,\n      ethStore,\n      tezStore,\n      refundTime,\n      update\n    );\n  }, 180000);\n\n  return {\n    hashedSecret: req_swap.hashedSecret,\n    value: amount + \" XTZ\",\n    refundTime,\n    state: 1,\n  };\n};\n\nexport default respondEth;\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Setup from \"./components/setup\";\nimport setEthAccount from \"./library/ethereum/account/setAccount\";\nimport setTezAccount from \"./library/tezos/account/setAccount\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/header\";\nimport Home from \"./components/home\";\nimport Ethereum from \"./components/newSwap/ethereum/index.jsx\";\nimport Swap from \"./components/newSwap\";\nimport Tezos from \"./components/newSwap/tezos\";\nimport requestTezos from \"./library/common/request-tezos\";\nimport respondTezos from \"./library/common/respond-tezos\";\nimport requestEth from \"./library/common/request-eth\";\nimport respondEth from \"./library/common/respond-eth\";\n\nconst App = () => {\n  const [ethStore, ethSetup] = useState(undefined);\n  const [tezStore, tezSetup] = useState(undefined);\n  const [swaps, updateSwaps] = useState(undefined);\n  const [, updateState] = React.useState();\n\n  const swapRef = useRef();\n  swapRef.current = swaps;\n  const ethRef = useRef();\n  ethRef.current = ethStore;\n  const tezRef = useRef();\n  tezRef.current = tezStore;\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const initialize = async (ethKey, tezKey) => {\n    const eth = setEthAccount(ethKey);\n    const tez = await setTezAccount(tezKey);\n    ethSetup(eth);\n    tezSetup(tez);\n  };\n\n  const update = (hash, state) => {\n    let newSwap = swapRef.current;\n    if (newSwap[hash] !== undefined) {\n      newSwap[hash].state = state;\n      updateSwaps(newSwap);\n      forceUpdate();\n    } else console.log(\"missing hash update request\");\n  };\n\n  const genSwap = async (type, value, req_swap = undefined) => {\n    let swap = {};\n    if (type === 2) {\n      if (req_swap === undefined) {\n        swap = await requestTezos(\n          value,\n          ethRef.current,\n          tezRef.current,\n          update\n        );\n      } else {\n        swap = await respondTezos(\n          value,\n          ethRef.current,\n          tezRef.current,\n          req_swap,\n          update\n        );\n      }\n    } else if (type === 1) {\n      if (req_swap === undefined) {\n        swap = await requestEth(value, ethRef.current, tezRef.current, update);\n      } else {\n        swap = await respondEth(\n          value,\n          ethRef.current,\n          tezRef.current,\n          req_swap,\n          update\n        );\n      }\n    }\n    if (swap === undefined) return false;\n    let newSwaps = swaps;\n    if (newSwaps === undefined) {\n      newSwaps = {};\n    }\n    newSwaps[swap.hashedSecret] = swap;\n    updateSwaps(newSwaps);\n    return true;\n  };\n\n  if (ethStore === undefined || tezStore === undefined)\n    return (\n      <div className=\"App\">\n        <Setup init={initialize} />\n      </div>\n    );\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header ethStore={ethStore} tezStore={tezStore} />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home swaps={swaps} />\n          </Route>\n          <Route exact path=\"/create/eth\">\n            <Ethereum\n              genSwap={genSwap}\n              selfAcc={tezStore.keyStore.publicKeyHash}\n            />\n          </Route>\n          <Route exact path=\"/create/xtz\">\n            <Tezos genSwap={genSwap} ethStore={ethStore} />\n          </Route>\n          <Route exact path=\"/create\">\n            <Swap />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import config from \"../../../globalConfig.json\";\nimport { Transaction } from \"ethereumjs-tx\";\n\nconst interact = async (\n  web3,\n  store,\n  data,\n  ether,\n  gas,\n  to = config.ethereum.contractAddr,\n  chain = config.ethereum.chain\n) => {\n  return new Promise((resolve) => {\n    try {\n      web3.eth.getBlock(\"latest\", false, (error, result) => {\n        var _gasLimit = result.gasLimit;\n        try {\n          web3.eth.getGasPrice((error, result) => {\n            var _gasPrice = result;\n            try {\n              const privateKey = Buffer.from(store.keyStore.privateKey, \"hex\");\n\n              var _hex_gasLimit = web3.utils.toHex(\n                (_gasLimit + 1000000).toString()\n              );\n              var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());\n              var _hex_Gas = web3.utils.toHex(gas);\n\n              web3.eth\n                .getTransactionCount(store.keyStore.address)\n                .then((nonce) => {\n                  var _hex_nonce = web3.utils.toHex(nonce);\n\n                  const rawTx = {\n                    nonce: _hex_nonce,\n                    from: store.keyStore.address,\n                    gasPrice: _hex_gasPrice,\n                    gasLimit: _hex_gasLimit,\n                    gas: _hex_Gas,\n                    value: web3.utils.toHex(web3.utils.toWei(ether, \"ether\")),\n                    data: data,\n                  };\n                  if (to !== \"\") rawTx[\"to\"] = to;\n                  const tx = new Transaction(rawTx, { chain: chain });\n                  tx.sign(privateKey);\n                  var serializedTx = \"0x\" + tx.serialize().toString(\"hex\");\n                  web3.eth\n                    .sendSignedTransaction(serializedTx.toString(\"hex\"))\n                    .on(\"transactionHash\", (transactionHash) => {\n                      console.log(\"ETH TX HASH : \", transactionHash);\n                    })\n                    .then((contract) => {\n                      if (contract.contractAddress != null)\n                        resolve(contract.contractAddress);\n                      resolve(true);\n                    })\n                    .catch((error) => {\n                      console.error(\"ETH TX ERROR : \", error);\n                      resolve(false);\n                    });\n                });\n            } catch (error) {\n              console.error(\"ETH TX ERROR : \", error);\n              resolve(false);\n            }\n          });\n        } catch (error) {\n          console.error(\"ETH TX ERROR : \", error);\n          resolve(false);\n        }\n      });\n    } catch (error) {\n      console.error(\"ETH TX ERROR : \", error);\n      resolve(false);\n    }\n  });\n};\n\nexport default interact;\n"],"sourceRoot":""}